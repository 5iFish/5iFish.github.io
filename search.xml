<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Python3.5学习（二）</title>
      <link href="/2018/07/12/Python3.5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018/07/12/Python3.5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li>列表</li><li>元组</li><li>字符串</li><li>字典</li><li>集合</li><li>文件操作</li><li>字符编码</li></ul><a id="more"></a> <hr><h1 id="一、列表"><a href="#一、列表" class="headerlink" title="一、列表"></a>一、列表</h1><pre><code>names = &quot;ZhangYang Guyun Xiangpeng XuLiangChen&quot;#创建列表[]names = [&quot;ZhangYang&quot;,&quot;Guyun&quot;,&quot;XiangPeng&quot;,&quot;XuLiangchen&quot;]</code></pre><h2 id="1-增删改查"><a href="#1-增删改查" class="headerlink" title="1. 增删改查"></a>1. 增删改查</h2><p>增</p><pre><code>#追加到最后 list.appendnames.append(&quot;LeiHaidong&quot;)#插入到所选位置之前 list.insert(numb,str)names.insert(1,&quot;ChenRonghua&quot;)names.insert(3,&quot;XinZhiyu&quot;)</code></pre><p>删</p><pre><code>#delete1 list.remove(str)names.remove(&quot;ChenRonghua&quot;)#delete2 del list[numb]del names[1]#delete3 list.pop()names.pop() #删除最后一个</code></pre><p>改</p><pre><code>#修改 list[numb]=strnames[2]=&quot;XieDi&quot;print(names)</code></pre><p>查</p><pre><code>#查找 list.index(str)返回位置print(names.index(&quot;XieDi&quot;))</code></pre><h2 id="2-切片"><a href="#2-切片" class="headerlink" title="2. 切片"></a>2. 切片</h2><pre><code>names=[&apos;张三&apos;,&apos;Guyun&apos;,&apos;Xiangpeng&apos;,&apos;Alex&apos;]print(names[1:2])&apos;&apos;&apos;[a:b]取值为[a,b)左闭右开区间可以将:理解为省略的都取显示结果[&apos;Guyun&apos;]&apos;&apos;&apos;#取最后一个值print(names[-1])#取最后两个值print(names[-1:-3])#错误取法&apos;&apos;&apos;结果为[]应该是自左向右取值&apos;&apos;&apos;print(names[-3:-1])#错误取法&apos;&apos;&apos;结果为[&apos;Guyun&apos;, &apos;XiangPeng&apos;]取不到最后一位&apos;&apos;&apos;print(names[-2:])#正确取法#自前向后取3个print(names[:3])names2=[&apos;张三&apos;,&apos;Alex&apos;,&apos;Guna&apos;]#步长切片list[起:终:步长]print(names[0:-1:2])print(names[::2])</code></pre><h2 id="3-copy"><a href="#3-copy" class="headerlink" title="3. copy"></a>3. copy</h2><pre><code>import copynames = [&quot;ZhangYang&quot;,&quot;Guoyun &quot;,[&quot;jack&quot;,&quot;Anny&quot;]]names2 = names.copy()print(names)print(names2)#copy只复制一级列表，浅copy#names中的二级列表[&quot;jack&quot;,&quot;Anny&quot;]只复制了二级列表的id#当通过names[2][1]修改时，names2中的二级列表也会被修改names[1]=&quot;郭云&quot;names[2][1]=&quot;安妮&quot;print(names)print(names2)#copy.deepcopy:深copy#涉及到二级列表时创建新的列表id并创建二级列表#改变names的二级列表时，不改变names2的内容names3 = copy.deepcopy(names)names[2][1]=&quot;anny&quot;print(names)print(names3)for i in names:    print(i)</code></pre><h2 id="4-其他操作"><a href="#4-其他操作" class="headerlink" title="4. 其他操作"></a>4. 其他操作</h2><pre><code>#提取 list[list.index(str)]print(names[names.index(&quot;XieDi&quot;)])#统计重复的 list.count(str)print(names.count(&quot;XieDi&quot;))#清空 list.clear()names.clear()#反转 list.reverse()names.reverse()print(names)#按ascII码排序 list.sort()names.sort() #合并列表 list1.extend(list2),在末尾追加，不合并重复names.extend(names2)#del names2删除列表变量</code></pre><hr><h1 id="二、元组"><a href="#二、元组" class="headerlink" title="二、元组"></a>二、元组</h1><p>元组不希望被修改，且只有两种用法：</p><pre><code>names = (&apos;alex&apos;,&apos;jack&apos;)#index:查找,count:计数print(names.index(&apos;alex&apos;),names.count(&apos;jack&apos;))</code></pre><hr><h1 id="三、实例一：购物车"><a href="#三、实例一：购物车" class="headerlink" title="三、实例一：购物车"></a>三、实例一：购物车</h1><p>需求：</p><ol><li>启动程序后，让用户输入工资，然后打印商品列表</li><li>允许用户根据商品编号购买商品</li><li>用户选择商品后，检测余额是否够，够就直接扣款，不够就提醒</li><li>可随时退出，退出时，打印已购买的商品和余额</li></ol><p>自己写的代码如下：</p><pre><code># Author:ZT#创建商品列表goods = [[1,&quot;红米Note5&quot;,1099],         [2,&quot;华为荣耀畅玩7c&quot;,899],         [3,&quot;洁柔抽纸&quot;,43],         [4,&quot;小熊面包机&quot;,199],         [5,&quot;小米体脂称&quot;,179]]shoppingcart = [&quot;购物清单为：&quot;]#输入薪水balance = int(input(&quot;薪水：&quot;))#进入循环打印商品列表while balance&gt;0:    for i in goods:        print(i)    numbers =input(&quot;想买哪个?&quot;)    if (numbers!=&apos;q&apos;)and(1&lt;=int(numbers)&lt;=5):        if balance&gt;=goods[int(numbers)-1][2]:            shoppingcart.append(goods[int(numbers)-1])            balance=balance-goods[int(numbers)-1][2]            print(&quot;添加%s到购物车成功！余额为：%d&quot;%(goods[int(numbers)-1][1],balance))        else:            print(&quot;余额不足！！！&quot;)    else:        for i in shoppingcart:            print(i)        print(&quot;余额为：%d&quot;%balance)        break</code></pre><p>Alex代码为:</p><pre><code># Author:Alexproduct_list = [    (&apos;Iphone&apos;,5800),    (&apos;Mac Pro&apos;,9800),    (&apos;Bike&apos;,800),    (&apos;Watch&apos;,10600),    (&apos;Coffee&apos;,31),    (&apos;Python&apos;,120)]shopping_list = []salary = input(&quot;Input your salary:&quot;)#判断输入的数据类型if salary.isdigit():    salary = int(salary)    while True:        &apos;&apos;&apos;        for item in product_list:            print(product_list.index(item),item)        &apos;&apos;&apos;        #enumerate():将列表下标取出        for index,item in enumerate(product_list):            print(index,item)        user_choice = input(&quot;选择要买的商品&gt;&gt;&gt;:&quot;)        #判断输入的数据类型        if user_choice.isdigit():            user_choice: int = int(user_choice)            if user_choice &lt;len(product_list) and user_choice &gt;= 0:                p_item = product_list[user_choice]                if salary&gt;=p_item[1]:                    shopping_list.append(p_item)                    salary -=p_item[1]                    print(&quot;Added %s into shopping cart,your current balance is \033[31;1m%s\033[0m&quot;%(p_item[0],salary))                else:                    print(&quot;\033[41;1m余额只剩%s啦，还买个毛线\033[0m&quot; % salary)            else:                print(&quot;product code %s is not exist&quot;%user_choice)        elif user_choice == &apos;q&apos;:            print(&quot;------Shopping List------&quot;)            for index,p in enumerate(shopping_list):                print(index,p)            print(&quot;Your current balance:&quot;,salary)            exit()        else:            print(&quot;invalid option&quot;)else:    print(&quot;error:please input digit!!&quot;)</code></pre><hr><h1 id="四、字符串"><a href="#四、字符串" class="headerlink" title="四、字符串"></a>四、字符串</h1><pre><code>name = &quot;zhangsan,my name is {name},and I&apos;m {year} years old&quot;#将字符串首字母大写print(name.capitalize())#统计指定字符出现次数print(name.count(&quot;a&quot;))#name居中，一共打印50个字符，不足用-补充print(name.center(50,&quot;-&quot;))#判断是否以...结尾print(name.endswith(&quot;an&quot;))#find:查找字符串中第一次出现指定字符的位置#[:]字符串切片print(name[name.find(&quot;a&quot;):7])#format:格式化，映射方式传递#format_map:后面使用字典传递print(name.format(name=&quot;Alex&quot;,year=23))print(name.format_map({&apos;name&apos;:&apos;zhangsan&apos;,&apos;year&apos;:&apos;20&apos;}))#判断是否为整数print(&apos;354&apos;.isdigit())#使用指定连字符将列表中元素连接 连字符.join(list)print(&apos;+&apos;.join([&apos;1&apos;,&apos;2&apos;,&apos;3&apos;]))#从左边开始70个字符，不足用*补充print( name.ljust(70,&apos;*&apos;) )#从右侧开始70个字符，不足用-补充print(name.rjust(70,&apos;-&apos;))#strip()去除两边的空格和回车，lstrip()去除左面的空格和回车print(&apos;\nZhangsan&apos;.lstrip())#将预设的对应转换关系在新字符串中相对应，形成字典 p=str.maketrans(&quot;abcdef&quot;,&apos;123456&apos;)#使用translate将字典应用于新的字符串print(&quot;zhangsan&quot;.translate(p))#replace(&apos;oldstr&apos;,&apos;newstr&apos;,times)#将oldstr替换为newstr，从左到右替换times次print(&apos;zhangsan&apos;.replace(&apos;z&apos;,&apos;Z&apos;,1))#将指定字符作为分割符分割字符串形成列表print(&apos;zhangsan&apos;.split(&apos;a&apos;))</code></pre><hr><h1 id="五、字典"><a href="#五、字典" class="headerlink" title="五、字典"></a>五、字典</h1><h2 id="1-创建字典"><a href="#1-创建字典" class="headerlink" title="1. 创建字典"></a>1. 创建字典</h2><pre><code>#字典：key-valueinfo = {    &apos;stu1101&apos;:&quot;Zhang San&quot;,    &apos;stu1102&apos;:&quot;Li Si&quot;,    &apos;stu1103&apos;:&quot;Wang Wu&quot;}#print 无序，没有下标print(info)print(info[&quot;stu1101&quot;])</code></pre><h2 id="2-增加"><a href="#2-增加" class="headerlink" title="2. 增加"></a>2. 增加</h2><pre><code>#info[&quot;key&quot;]=valueinfo[&quot;stu1104&quot;]=&quot;Liu Xin&quot;</code></pre><h2 id="3-修改"><a href="#3-修改" class="headerlink" title="3. 修改"></a>3. 修改</h2><pre><code>#修改指定key的value值info[&quot;stu1101&quot;]=&quot;张三&quot;info[&quot;stu1104&quot;]=&quot;赵六&quot;#updateb = {    &apos;stu1102&apos;:&quot;陈10&quot;,    1:3,    2:4}info.update(b)print(info)</code></pre><h2 id="4-删除"><a href="#4-删除" class="headerlink" title="4. 删除"></a>4. 删除</h2><pre><code>#删除:del与popdel info[&quot;stu1101&quot;]info.pop(&quot;stu1101&quot;)</code></pre><h2 id="5-查询"><a href="#5-查询" class="headerlink" title="5. 查询"></a>5. 查询</h2><pre><code>#py3判断字典里有没有这个key,返回True or Falseprint(info.get(&apos;stu1101&apos;))print(&apos;stu1103&apos; in info)#py2里为#info.has_key(&quot;1103&quot;)print(info)#多级字典嵌套</code></pre><h2 id="6-其他操作"><a href="#6-其他操作" class="headerlink" title="6. 其他操作"></a>6. 其他操作</h2><pre><code>#打印所有的valuesprint(info.values())#打印所有的keysprint(info.keys())#setdefault:先在字典里取值，如果能取到不做更改，取不到则改为目标值info.setdefault(&quot;stu1103&quot;,&quot;胡八&quot;)print(info)#字典转列表print(info.items())#初始化字典c= dict.fromkeys([6,7,8],&quot;test&quot;)print(c)for i in info:    print(i,info[i])#将info转换成了列表，加大了工作量，当字典体积大的时候体现明显for k,v in info.items():    print(k,v)</code></pre><hr><h1 id="六、实例二：三级菜单"><a href="#六、实例二：三级菜单" class="headerlink" title="六、实例二：三级菜单"></a>六、实例二：三级菜单</h1><p>主要依靠多级字典实现</p><pre><code># Author:ZTcity_map = {    &quot;辽宁省&quot;:{        &quot;沈阳市&quot;:{            &quot;铁西区&quot;:[&quot;居住&quot;,&quot;My home&quot;],            &quot;和平区&quot;:[&quot;学校&quot;,&quot;My school&quot;]        },        &quot;大连市&quot;:{            &quot;中山区&quot;:[&quot;游玩&quot;,&quot;My travel&quot;],            &quot;沙河口区&quot;:[&quot;旅店&quot;,&quot;My hotel&quot;]        },        &quot;丹东市&quot;:{            &quot;元宝区&quot;:[&quot;断桥&quot;,&quot;happy!!&quot;]        }    },    &quot;内蒙古省&quot;:{        &quot;呼伦贝尔市&quot;:{            &quot;海拉尔&quot;:[&quot;森林公园&quot;,&quot;鸟园&quot;],            &quot;拉布大林&quot;:[&quot;工作&quot;,&quot;大酒店&quot;]        },    },    &quot;黑龙江省&quot;:{        &quot;大庆市&quot;:{            &quot;龙凤区&quot;:[&quot;路过&quot;,&quot;姥姥&quot;]        }    }}#设置了一个控制循环的变量exit_mark= Truewhile exit_mark:    #只打印出city_map中的key    for i in city_map:        print(i)    choice = input(&quot;选择进入&gt;&gt;&gt;:&quot;)    if choice in city_map:        while exit_mark:            for i2 in city_map[choice]:                print(&quot;\t&quot;,i2)            choice2 = input(&quot;选择进入&gt;&gt;&gt;:&quot;)            if choice2 in city_map[choice]:                while exit_mark:                    for i3 in city_map[choice][choice2]:                        print(&quot;\t\t&quot;,i3)                    choice3 = input(&quot;选择进入&gt;&gt;&gt;:&quot;)                    if choice3 in city_map[choice][choice2]:                        for i4 in city_map[choice][choice2][choice3]:                            print(&quot;\t\t\t&quot;,i4)                        choice4 = input(&quot;最后一层，按b返回上一级&quot;)                        if choice4 == &quot;b&quot;:                            pass                        elif choice4 ==&quot;q&quot;:                            exit_mark = False                    if choice3 == &quot;b&quot;:                        break                    elif choice3 ==&quot;q&quot;:                        exit_mark = False            if choice2 == &quot;b&quot;:                break            elif choice2 == &quot;q&quot;:                exit_mark = False</code></pre><hr><h1 id="七、集合"><a href="#七、集合" class="headerlink" title="七、集合"></a>七、集合</h1><p>集合重要的两个作用：</p><ol><li>去重</li><li>关系测试</li></ol><p>集合是无序的</p><h2 id="1-集合的创建"><a href="#1-集合的创建" class="headerlink" title="1. 集合的创建"></a>1. 集合的创建</h2><pre><code>#集合的创建#通过set(list)创建list_1 = [1,4,5,7,3,6,7,9]list_1 = set(list_1)#通过set([])创建list_2 =set([2,6,0,66,22,8,4])print(list_1,list_2)</code></pre><h2 id="2-集合运算"><a href="#2-集合运算" class="headerlink" title="2. 集合运算"></a>2. 集合运算</h2><pre><code>#取交集interlist_1=list_1.intersection(list_2)print(interlist_1)#取并集unionlist_1 = list_1.union(list_2)print(unionlist_1)#差集diflist_1 = list_1.difference(list_2)print(diflist_1)#子集、父集#A.issubset(B):判断A是否为B的子集，返回True or False#A.issuperset(B):判断A是否为B的父集，返回True or Falselist_3 = set([1,3,7])print(list_3.issubset(list_1))print(list_1.issuperset(list_3))#对称差集print(list_1.symmetric_difference(list_2))&quot;&quot;&quot;符号表示交集 &amp;并集 |差集 -对称差集 ^&quot;&quot;&quot;</code></pre><h2 id="3-集合的增删改查"><a href="#3-集合的增删改查" class="headerlink" title="3. 集合的增删改查"></a>3. 集合的增删改查</h2><pre><code>#add()增加元素#update(list)增加列表list_1.add(999)list_1.update([888,777])print(list_1)#pop随机删除并返回删除的值print(list_1.pop())#discard:删除指定元素list_1.discard(4)print(list_1)#查询inYorN = 1 in list_1print(YorN)</code></pre><hr><h1 id="八、文件操作"><a href="#八、文件操作" class="headerlink" title="八、文件操作"></a>八、文件操作</h1><p>现有一文件实例yesterday.txt：</p><pre><code>Oh, yesterday when I was young噢 昨日当我年少轻狂So many, many songs were waiting to be sung有那么那么多甜美的曲儿等我歌唱So many wild pleasures lay in store for me有那么多肆意的快乐And so much pain my eyes refused to see还有那么多痛苦 我的双眼却视而不见There are so many songs in me that won&apos;t be sung我有太多歌曲永远不会被唱起I feel the bitter taste of tears upon my tongue我尝到了舌尖泪水的苦涩滋味The time has come for me to pay for yesterday终于到了付出代价的时间 为了昨日When I was young当我年少轻狂</code></pre><h2 id="1-打开"><a href="#1-打开" class="headerlink" title="1. 打开"></a>1. 打开</h2><pre><code>#open(&quot;filename&quot;,打开方式,encoding=&quot;编码格式&quot;)f = open(&quot;yesterday&quot;,encoding=&quot;utf-8&quot;)#f:文件句柄&apos;&apos;&apos;with语句避免打开文件后忘记关闭通过上下文管理\下一行缩进表示清晰，省的一行字太多&apos;&apos;&apos;#with open(&quot;file_name&quot;,打开方式,encoding=编码方式) as 句柄名with open(&quot;yesterday&quot;,&apos;r&apos;,encoding=&apos;utf-8&apos;) as f,\        open(&quot;yesterday.bak&quot;,&apos;r&apos;,encoding=&apos;utf-8&apos;) as f_new:    for line in f:        print(line)    print(&quot;------------------&quot;)    for line in f_new:        print(line)</code></pre><h2 id="2-读"><a href="#2-读" class="headerlink" title="2. 读"></a>2. 读</h2><pre><code>data = f.read()#光标移动到了最后一行print(data)data2 =f.read()print(&quot;---------data2--------&quot;,data2)#结果中data2无内容，read读完后光标停留到最后#r+追加读写光标在最后，先读再以追加模式写入f= open(&quot;yesterday2&quot;,&apos;r+&apos;,encoding=&apos;utf-8&apos;)</code></pre><h2 id="3-写"><a href="#3-写" class="headerlink" title="3. 写"></a>3. 写</h2><pre><code>#w = write创建一个文件#a = append追加写不能读#创建了yesterday2并写入f = open(&quot;yesterday2&quot;,&apos;a&apos;,encoding=&quot;utf-8&quot;)f.write(&quot;\n我爱北京天安门。。。\n&quot;)f.write(&quot;天安门上太阳升。。。&quot;)f.close()#w+写读先创建再读f= open(&quot;yesterday2&quot;,&apos;w+&apos;,encoding=&apos;utf-8&apos;)</code></pre><h2 id="4-修改"><a href="#4-修改" class="headerlink" title="4. 修改"></a>4. 修改</h2><pre><code># Author:ZT&quot;&quot;&quot;文件不能直接在硬盘上修改有两种修改方式第一种是在内存中修改，然后写回硬盘(内容大的时候不方便，一般不采用)另一种是修改后写入新文件&quot;&quot;&quot;f = open(&quot;yesterday&quot;,&apos;r&apos;,encoding=&apos;utf-8&apos;)f_new = open(&quot;yesterday.bak&quot;,&apos;w&apos;,encoding=&apos;utf-8&apos;)for line in f:    if &quot;肆意的快乐&quot; in line:        #详见字符串的replace功能        line = line.replace(&quot;肆意的快乐&quot;,&quot;来啊快活啊&quot;)    f_new.write(line)f.close()f_new.close()</code></pre><h2 id="5-例子"><a href="#5-例子" class="headerlink" title="5. 例子"></a>5. 例子</h2><pre><code>#high loop 高效#实现创建将第十行的句子替换为----continue-----f = open(&quot;yesterday&quot;,&apos;r&apos;,encoding=&apos;utf-8&apos;)count = 0for line in f:    if count ==9:        print(&apos;--------continue--------&apos;)        count+=1        continue    count += 1    #读文件的时候换行符\n也被读进去，在逐行打印中去掉    print(line.strip())f.close()#low loop 低效#实现第十行句子替换为-------end------#f.readlines:以字符串形式读入#当文件很大时特别占用内存f = open(&quot;yesterday&quot;,&apos;r&apos;,encoding=&apos;utf-8&apos;)for index,line in enumerate(f.readlines()):    if index == 9:        print(&apos;-------end------&apos;)        continue    print(line.strip())</code></pre><h2 id="6-tell、seek"><a href="#6-tell、seek" class="headerlink" title="6. tell、seek"></a>6. tell、seek</h2><pre><code>f = open(&quot;yesterday&quot;,&apos;r&apos;,encoding=&apos;utf-8&apos;)#返回指针位置，目前处在文件头print(f.tell())print(f.readline())#返回指针位置，目前处在第一行末尾print(f.tell())#设置指针指向文件头f.seek(0)print(f.tell())print(f.readline())</code></pre><h2 id="7-其他功能"><a href="#7-其他功能" class="headerlink" title="7. 其他功能"></a>7. 其他功能</h2><pre><code>#encoding:打印文件编码print(f.encoding)#isatty:显示终端设备print(f.isatty())#截断，从第n个字符后全部舍弃默认为0f.truncate(10)#flush()#正常输出需要等缓存区满了后,flush可以及时写入，可以制作进度条效果print(f.flush())f.close()</code></pre><h2 id="8-制作进度条"><a href="#8-制作进度条" class="headerlink" title="8. 制作进度条"></a>8. 制作进度条</h2><pre><code>#利用flush强制刷新功能#正常文件需要等到循环结束才能显示，使用flush可以及时刷到硬盘中# Author:ZTimport sys,timefor i in range(20):    sys.stdout.write(&quot;#&quot;)    sys.stdout.flush()    time.sleep(0.5)</code></pre><hr><h1 id="九、字符编码"><a href="#九、字符编码" class="headerlink" title="九、字符编码"></a>九、字符编码</h1><p><img src="/images/字符编码转化图.jpg" alt="字符编码转换图"></p><p>当编译语言使用系统默认编码(uft-8)时：</p><pre><code># Author:ZT&apos;&apos;&apos;py程序代码的默认编码是utf-8py字符串是以unicode编码的encode()默认采用系统编码将Unicode编码成utf-8encode(&quot;gbk&quot;)编码成gbk&apos;&apos;&apos;import sys#打印出系统的默认编码print(sys.getdefaultencoding())s=&quot;哈哈&quot;#将Unicode编码成gbks_gbk = s.encode(&quot;gbk&quot;)print(s_gbk)print(s.encode())#将gbk转换成utf-8#先解码成unicode,再编码成utf-8gbk_utf8 = s_gbk.decode(&quot;gbk&quot;).encode(&quot;utf-8&quot;)print(gbk_utf8)</code></pre><p>当编译语言使用gbk编码时：</p><pre><code>#将编译语言设置为gbk编码#-*-coding:gbk-*-# Author:ZT&quot;&quot;&quot;python3中进行encode时自动转换成byte类型&quot;&quot;&quot;import sys#获取系统默认编码print(sys.getdefaultencoding())#保存到字符串的时候依旧是unicode编码s=&quot;你好&quot;#编码成gbkprint(s.encode(&quot;gbk&quot;))print(s.encode(&quot;utf-8&quot;).decode(&quot;utf-8&quot;).encode(&quot;gb2312&quot;))#编码成utf-8-&gt;解码-&gt;编码成gb2312-&gt;解码，最终为unicodeprint(s.encode(&quot;utf-8&quot;).decode(&quot;utf-8&quot;).encode(&quot;gb2312&quot;).decode(&quot;gb2312&quot;))</code></pre><hr><h1 id="十、作业"><a href="#十、作业" class="headerlink" title="十、作业"></a>十、作业</h1>]]></content>
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3.5学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>好久没更新啦!</title>
      <link href="/2018/07/12/%E5%A5%BD%E4%B9%85%E6%B2%A1%E6%9B%B4%E6%96%B0%E5%95%A6/"/>
      <url>/2018/07/12/%E5%A5%BD%E4%B9%85%E6%B2%A1%E6%9B%B4%E6%96%B0%E5%95%A6/</url>
      <content type="html"><![CDATA[<p>之前一直在备战软考和六级考试</p><p>导致一直没有学习python</p><p>这几天得努力啦</p>]]></content>
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python3.5学习（一）</title>
      <link href="/2018/04/19/Python3.5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/04/19/Python3.5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="简单的输入输出"><a href="#简单的输入输出" class="headerlink" title="简单的输入输出"></a>简单的输入输出</h2><pre><code>username = input(&quot;username&quot;)print(username)</code></pre><h2 id="整行打印"><a href="#整行打印" class="headerlink" title="整行打印"></a>整行打印</h2><p>三种方式:</p><a id="more"></a> <pre><code>info1 = &apos;&apos;&apos;----------- info of&apos;&apos;&apos;+ name +&apos;&apos;&apos; ------------Name:&apos;&apos;&apos; + name +&apos;&apos;&apos;Age:&apos;&apos;&apos; + age+&apos;&apos;&apos;Job:&apos;&apos;&apos; + job +&apos;&apos;&apos;Salary:&apos;&apos;&apos; + salary +&apos;&apos;&apos;----------------------------------------------&apos;&apos;&apos;print(info1)</code></pre><p>or</p><pre><code>info2 = &apos;&apos;&apos;------------- info of %s ----------Name:%sAge:%dJob:%sSalary:%s&apos;&apos;&apos; %(name,name,age,job,salary)print(info2)</code></pre><p>or</p><pre><code>info3 = &apos;&apos;&apos;------------ info of {_name}---------Name:{_name}Age:{_age}Job:{_job}Salary:{_salary}&apos;&apos;&apos;.format(    _name=name,    _age=age,    _job=job,    _salary=salary)print(info3)</code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre><code>name = &quot;zt&quot;name2 = nameprint (&quot;My name is &quot;,name,name2)name  = &quot;PaoChe Ge&quot;gf_of_oldboy = &quot;007&quot;#大写代表常量PIE = 200city = &quot;中国&quot;print(name,name2)print(city)</code></pre><p>输出结果为：</p><pre><code>My name is  zt ztPaoChe Ge zt中国</code></pre><p>可以看出Python的变量赋值和C语言的指针很像，我们将一变量等于(=)另一变量时，是将右侧变量的指向地址赋给左侧变量，而不是将右侧变量的值传递过去。</p><h2 id="getpass模块"><a href="#getpass模块" class="headerlink" title="getpass模块"></a>getpass模块</h2><pre><code>import getpasspassword = getpass.getpass(&quot;password:&quot;)</code></pre><p>无回现输入密码</p><h2 id="if判断语句"><a href="#if判断语句" class="headerlink" title="if判断语句"></a>if判断语句</h2><pre><code>import getpass_username = &quot;ZT&quot;_password = &quot;123123&quot;username = input(&quot;username:&quot;)password = getpass.getpass(&quot;password:&quot;)if _username == username and _password == password:    print(&quot;Welcome user {name}&quot;.format(name = username))else:    print(&quot;Invalid username or password&quot;)print(username,password)</code></pre><p>使用时注意if语句后的”:”容易漏掉</p><h2 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h2><pre><code>for i in range(0,10,3):    print(&quot;loop &quot;,i)</code></pre><p>i=0，判断是否小于10，之后进入循环输出0，循环后i=i+3，<br>i=3，判断是否小于10，之后进入循环输出3，循环后i=i+3，<br>i=6，判断是否小于10，之后进入循环输出6，循环后i=i+3，<br>i=9，判断是否小于10，之后进入循环输出9，循环后i=i+3，<br>i=12，判断是否小于10，循环终止。<br>※先判断，再循环，后自增。</p><h2 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h2><pre><code>i = 0while i&lt;3:    print(i)    i = i + 1</code></pre><h3 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a>跳出循环</h3><p>continue 跳出本次循环进行下次循环<br>break 退出本循环体</p><h3 id="实例：猜数字"><a href="#实例：猜数字" class="headerlink" title="实例：猜数字"></a>实例：猜数字</h3><pre><code>_myage = 26count = 0while count &lt;3:    myage = int(input(&quot;猜猜我年龄\n&quot;))    if myage == _myage:        print(&quot;恭喜你，猜对了！&quot;)        break    elif myage &gt;_myage:        print(&quot;往小了猜&quot;)    else:        print(&quot;往大了猜&quot;)    count = count +1    if count == 3:        countine_confirm = input(&quot;do you want to keep game?&quot;)        if countine_confirm !=&quot;n&quot;:            count = 0</code></pre><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h2><ul><li>输入用户名密码</li><li>认证成功后显示欢迎信息</li><li>输错三次后锁定账户</li></ul><p>难点:</p><ul><li>涉及到Python对文件的操作增删改查</li><li>判断和循环语句的嵌套使用</li></ul><h3 id="Python3-5对文件的操作"><a href="#Python3-5对文件的操作" class="headerlink" title="Python3.5对文件的操作"></a>Python3.5对文件的操作</h3><pre><code>open(‘test.txt’,’mode’,encoding=’xxx’)</code></pre><p>第一个参数是文件的路径名；第三个参数的xxx那里是填入适当的编码格式，假如你的文件是gbk格式的，你打开的时候，为了防止出现乱码，你就得告诉函数，需要用什么格式打开。</p><table><thead><tr><th style="text-align:left">mode</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">r</td><td style="text-align:left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td style="text-align:left">rb</td><td style="text-align:left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td style="text-align:left">r+</td><td style="text-align:left">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td style="text-align:left">rb+</td><td style="text-align:left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td style="text-align:left">w</td><td style="text-align:left">打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:left">wb</td><td style="text-align:left">以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:left">w+</td><td style="text-align:left">打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:left">wb+</td><td style="text-align:left">以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:left">a</td><td style="text-align:left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。</td></tr><tr><td style="text-align:left">ab</td><td style="text-align:left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。</td></tr><tr><td style="text-align:left">a+</td><td style="text-align:left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td style="text-align:left">ab+</td><td style="text-align:left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><h4 id="读操作"><a href="#读操作" class="headerlink" title="读操作"></a>读操作</h4><pre><code>f = open(&apos;fileTest.txt&apos;, &apos;r&apos;)f = f.read()print(f)</code></pre><p>read()一次性读取文件的全部内容，可以在read(size)里面传参，表示每次读取size个字节的内容。<br>readline() 每次读取文件一行的内容。<br>readlines()一次读取所有内容并按行返回 list。</p><h4 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h4><p>只有调用close()方法时，操作系统才能保证把没有写入的数据全部写入磁盘：</p><pre><code>f = open(&apos;fileTest2.txt&apos;,&apos;w&apos;)f.write(&apos;hello! It`s me!&apos;)f.close()</code></pre><p>对于要写入特定编码的文本文件，可以给open() 的encoding传参：</p><pre><code>f = open(&apos;fileTest2.txt&apos;,&apos;w&apos;,encoding=&apos;gbk&apos;)f.write(&apos;hello! It`s me!&apos;)f.close()</code></pre><p>write()是文件写操作中一个比较简单的操作，它将字符串写入文件，没有返回值。除了这个write()还有writelines()函数，这个函数是向文件写入一个序列字符串列表，换行需要字节添加换行符：</p><pre><code>str = [&apos;你好,&apos;,&apos;欢迎！\n&apos;,&apos;这里是XXX的博客.&apos;]f = open(&apos;fileTest2.txt&apos;,&apos;w&apos;,encoding=&apos;utf-8&apos;)f.writelines(str)f.close()&apos;&apos;&apos;这是运行结果：你好,欢迎！这里是XXX的博客.&apos;&apos;&apos;</code></pre><h4 id="文件其他操作"><a href="#文件其他操作" class="headerlink" title="文件其他操作"></a>文件其他操作</h4><p>seek():指定文件指针的位置，seek(0)把指针移动到文件开头处；<br>tell():获取文件指针的位置；</p><h4 id="关闭文件操作"><a href="#关闭文件操作" class="headerlink" title="关闭文件操作"></a>关闭文件操作</h4><p>我们结束文件操作后，需要调用close()为关闭文件操作符，以免占有内存资源。当然，python为我们提供了更便捷的语句，帮助我们关闭，那就with。上面的代码，修改成下面这个也是行得通的，而且也不用在写close()函数：</p><pre><code>with open(&apos;fileTest.txt&apos;,&apos;r&apos;,encoding=&apos;utf-8&apos;) as f:    for i in f.readlines():        if &apos;XXX&apos; in i:            i = i.replace(&apos;XXX&apos;,&apos;SSS&apos;)        print(i.strip())</code></pre><p>※注意：当使用readline时读取的为整行字符串加上末尾的换行符，要想去掉换行符在赋值的时候需要进行操作：</p><pre><code>i = &quot;hello&quot;j = i[1:]q = i[:-1]print(j+&apos;\n&apos;+q)&quot;&quot;&quot;结果为：ellohell&quot;&quot;&quot;</code></pre><p>要使用[:-1]去掉末尾的换行符。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code># Author:ZTimport getpassregiste = input(&quot;是否拥有账户？(y/n)\n&quot;)if(registe == &quot;n&quot;):    _username = input(&quot;请输入用户名：\n&quot;)    _password = getpass.getpass(&quot;请输入密码：\n&quot;)    _passwordc = getpass.getpass(&quot;请确认密码：\n&quot;)    while _password != _passwordc:        print(&quot;请重新输入用户名和密码&quot;)        _username = input(&quot;请输入用户名：\n&quot;)        _password = getpass.getpass(&quot;请输入密码：\n&quot;)        _passwordc = getpass.getpass(&quot;请确认密码：\n&quot;)    myfile = open(&quot;myaccount.txt&quot;,&apos;w&apos;)    myfile.write(&quot;y\n&quot;)    myfile.write(&quot;{username}\n&quot;.format(username=_username))    myfile.write(&quot;{password}\n&quot;.format(password=_password))    myfile.close()    print(&quot;恭喜你！创建成功！&quot;)elif (registe == &quot;y&quot;):    myaccount = open(&quot;myaccount.txt&quot;,&apos;r+&apos;)    state = myaccount.readline()[:-1]    _usernamer = myaccount.readline()[:-1]    _passwordr = myaccount.readline()[:-1]    if(state == &apos;n&apos;):        print(&quot;SORRY,YOUR ACCOUNT HAS BEEN LOCK,YOU CAN&apos;T LOGIN\nPLEASE CONNECTION WITH SOMEONE!!&quot;)    else:        for i in range(2,-1,-1):            username = input(&quot;请输入用户名：\n&quot;)            password = getpass.getpass(&quot;请输入密码：\n&quot;)            if (username == _usernamer and password == _passwordr):                print(&quot;Welcome user {name}&quot;.format(name=username))                break            else:                if (i == 0):                    myaccount.seek(0)                    myaccount.write(&quot;n\n&quot;)                    print(&quot;账户已被锁定！！！&quot;)                else:                    print(&quot;用户名或密码错误，今日还可输入{n}次&quot;.format(n=i))    myaccount.close()else:    print(&quot;输入无效!!!&quot;)</code></pre><h3 id="功能及不足"><a href="#功能及不足" class="headerlink" title="功能及不足"></a>功能及不足</h3><p>此接口主要实现的功能如下：</p><ul><li>实现了用户的注册和登录，并保持到硬盘</li><li>实现了无回现输入密码，并进行密码确认</li><li>实现了账户的锁定功能</li></ul><p>主要存在的问题如下：</p><ul><li>输入密码的部分代码存在明显的冗余</li><li>从文件取出信息的方式过于繁琐</li><li>锁定账户后可以通过重新注册解锁</li><li>整个程序的流程图不够完善</li><li>无法进行多用户账户管理</li></ul>]]></content>
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3.5学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World!</title>
      <link href="/2018/04/03/Hello-World-0/"/>
      <url>/2018/04/03/Hello-World-0/</url>
      <content type="html"><![CDATA[<p>真棒，终于弄好啦媳妇儿。</p><p>爱你，媳妇儿</p>]]></content>
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
